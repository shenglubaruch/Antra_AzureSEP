{
	"name": "dataflow_b2s",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "bronzeParquet"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_movie_silver_parquet",
						"type": "DatasetReference"
					},
					"name": "cleanSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_movie_bronze_parquet",
						"type": "DatasetReference"
					},
					"name": "bronzeUpdate"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "union1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as short,",
				"          Title as string,",
				"          Overview as string,",
				"          OriginalLanguage as string,",
				"          Price as double,",
				"          ReleaseDate as string,",
				"          Budget as double,",
				"          Revenue as double,",
				"          RunTime as short,",
				"          Tagline as string,",
				"          ImdbUrl as string,",
				"          TmdbUrl as string,",
				"          PosterUrl as string,",
				"          BackdropUrl as string,",
				"          CreatedDate as string,",
				"          CreatedBy as string,",
				"          UpdatedDate as string,",
				"          UpdatedBy as string,",
				"          Status as string,",
				"          ingestTime as timestamp,",
				"          ingestDate as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> bronzeParquet",
				"bronzeParquet filter(Status=='New') ~> filter1",
				"filter1 split(RunTime>=0,",
				"     disjoint: false) ~> split1@(runtimePostive, runtimeNegative)",
				"split1@runtimePostive derive(Status = 'Loaded') ~> derivedColumn1",
				"split1@runtimeNegative derive(Status = 'Quarantined') ~> derivedColumn2",
				"derivedColumn1, derivedColumn2 union(byName: true)~> union1",
				"derivedColumn1 select(mapColumn(",
				"          Id,",
				"          Title,",
				"          Overview,",
				"          OriginalLanguage,",
				"          Price,",
				"          ReleaseDate,",
				"          Budget,",
				"          Revenue,",
				"          RunTime,",
				"          Tagline,",
				"          ImdbUrl,",
				"          TmdbUrl,",
				"          PosterUrl,",
				"          BackdropUrl,",
				"          CreatedDate,",
				"          CreatedBy,",
				"          UpdatedDate,",
				"          UpdatedBy",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cleanSilver",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> bronzeUpdate"
			]
		}
	}
}