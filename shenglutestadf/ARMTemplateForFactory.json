{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "shenglutestadf"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureDatabricksDeltaLake1_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricksDeltaLake1'"
		},
		"SqlServer1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SqlServer1'"
		},
		"WWISqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWISqlDatabase'"
		},
		"WWISqlDatabaseDW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWISqlDatabaseDW'"
		},
		"WWISqlDatabaseODS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWISqlDatabaseODS'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://shenglutestadls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pl_bronze_to_silver')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_b2s",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_b2s",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronzeParquet": {
										"containerName": "parquetmovies",
										"directoryName": "movie_bronze_parquet"
									},
									"cleanSilver": {
										"containerName": "parquetmovies",
										"directoryName": "movie_silver_parquet"
									},
									"bronzeUpdate": {
										"containerName": "parquetmovies",
										"directoryName": "movie_bronze_parquet"
									},
									"languageSilver": {},
									"genresSilver": {
										"containerName": "parquetmovies",
										"directoryName": "genre_silver_parquet"
									},
									"sinkJunctionMoviesGenres": {}
								},
								"linkedServiceParameters": {
									"bronzeUpdate": {
										"schemaLinkedService": {
											"containerName": "parquetmovies",
											"directoryName": "movie_bronze_parquet"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "dataflow_repair",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "dataflow_b2s",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_repair",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"bronzeParquet": {
										"containerName": "parquetmovies",
										"directoryName": "movie_bronze_parquet"
									},
									"bronzeUpdate": {
										"containerName": "parquetmovies",
										"directoryName": "movie_bronze_parquet"
									},
									"silverInsert": {
										"containerName": "parquetmovies",
										"directoryName": "movie_silver_parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_b2s')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_repair')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_raw_to_bronze",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_raw_to_bronze",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_bronze_to_silver",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_raw_to_bronze",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_bronze_to_silver",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_raw_to_bronze')]",
				"[concat(variables('factoryId'), '/pipelines/pl_bronze_to_silver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ods_parquet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_tableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_wwiods_tableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "iterateSQLTablesODS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_tableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_tableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from dbo.@{item().SinkTableName}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SinkDataset",
											"type": "DatasetReference",
											"parameters": {
												"SinkTableName": {
													"value": "@{item().SinkTableName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkParquet",
											"type": "DatasetReference",
											"parameters": {
												"folderName": {
													"value": "@{item().SinkTableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_wwi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_tableList')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ods_to_integration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_wwi_ods_to_integration",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"CustomersParquet": {},
									"PeopleParquet": {},
									"InvoicesParquet": {},
									"OrderLinesParquet": {},
									"OrdersParquet": {},
									"StockItems": {},
									"sinkCustomers": {
										"containerName": "wwi",
										"directoryName": "Integration/Customers_Integration_parquet"
									},
									"sinkEmployee": {
										"containerName": "wwi",
										"directoryName": "Integration/Employees_Integration_parquet"
									},
									"sinkStockitems": {
										"containerName": "wwi",
										"directoryName": "Integration/stockitems_Integration_parquet"
									},
									"sinkOrdersFact": {
										"containerName": "wwi",
										"directoryName": "Integration/orders_Integration_parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_wwi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_wwi_ods_to_integration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_oltp_to_ods_auto')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "iterateSQLTables",
						"description": "Customers(Sales), Invoices(Sales), Orders(Sales), OrderLines(Sales), People(Application), StockItems(WareHouse)",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_tableList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_tableList').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "LookupOldWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from watermarktable where TableName  =  '@{item().TABLE_NAME}'\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_wwiods_watermark",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "LookupNewWaterMarkActivity",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select MAX(@{item().WaterMark_Column}) as NewWatermarkvalue from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "LookupNewWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "LookupOldWaterMarkActivity",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column} > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and @{item().WaterMark_Column} <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"sqlWriterStoredProcedureName": {
												"value": "@{item().StoredProcedureNameForMergeOperation}",
												"type": "Expression"
											},
											"sqlWriterTableType": {
												"value": "@{item().TableType}",
												"type": "Expression"
											},
											"storedProcedureTableTypeParameterName": {
												"value": "@{item().parameterName}",
												"type": "Expression"
											},
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SourceDataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SinkDataset",
											"type": "DatasetReference",
											"parameters": {
												"SinkTableName": "@{item().SinkTableName}"
											}
										}
									]
								},
								{
									"name": "StoredProceduretoWriteWatermarkActivity",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{activity('LookupOldWaterMarkActivity').output.firstRow.TableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "WWISqlDatabaseODS",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Lookup_tableList",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_wwiods_tableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_wwi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_tableList')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_watermark')]",
				"[concat(variables('factoryId'), '/datasets/SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/SinkDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseODS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_raw_to_bronze')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow_r2b",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_r2b",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"raw": {
										"containerName": "jsonmovies"
									},
									"bronze": {
										"containerName": "parquetmovies",
										"directoryName": "movie_bronze_parquet"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_movie"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_r2b')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_wwi_master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pl_oltp_to_ods_auto",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_oltp_to_ods_auto",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "pl_ods_parquet",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "pl_oltp_to_ods_auto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ods_parquet",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "pl_wwi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_oltp_to_ods_auto')]",
				"[concat(variables('factoryId'), '/pipelines/pl_ods_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseODS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SinkTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().SinkTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseODS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SinkParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "ODS/@{dataset().folderName}",
							"type": "Expression"
						},
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_genre_silver_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "parquetmovies"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "genre_silver_parquet"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_bronze_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "parquetmovies"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "movie_bronze_parquet"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_genres_silver_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "parquetmovies"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "movie_genres_silver_parquet"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_raw_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "jsonmovies"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"movie": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"Id": {
										"type": "integer"
									},
									"Title": {
										"type": "string"
									},
									"Overview": {
										"type": "string"
									},
									"Tagline": {
										"type": "string"
									},
									"Budget": {
										"type": "number"
									},
									"Revenue": {
										"type": "number"
									},
									"ImdbUrl": {
										"type": "string"
									},
									"TmdbUrl": {
										"type": "string"
									},
									"PosterUrl": {
										"type": "string"
									},
									"BackdropUrl": {
										"type": "string"
									},
									"OriginalLanguage": {
										"type": "string"
									},
									"ReleaseDate": {
										"type": "string"
									},
									"RunTime": {
										"type": "integer"
									},
									"Price": {
										"type": "number"
									},
									"CreatedDate": {
										"type": "string"
									},
									"UpdatedDate": {
										"type": "null"
									},
									"UpdatedBy": {
										"type": "null"
									},
									"CreatedBy": {
										"type": "null"
									},
									"genres": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"name": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_movie_silver_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "parquetmovies"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "movie_silver_parquet"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orilanguage_silver_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "parquetmovies"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "orilanguage_silver_parquet"
					}
				},
				"folder": {
					"name": "ds_movie"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiInte_employee_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "wwi"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "Integration/Employees_Integration_parquet"
					}
				},
				"folder": {
					"name": "ds_wwi_integration"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiInte_customers_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "wwi"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "Integration/Customers_Integration_parquet"
					}
				},
				"folder": {
					"name": "ds_wwi_integration"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerName",
						"type": "UTF8"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AlternateContactPersonID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "DeliveryCityID",
						"type": "INT32"
					},
					{
						"name": "PostalCityID",
						"type": "INT32"
					},
					{
						"name": "CreditLimit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "DATE"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "BOOLEAN"
					},
					{
						"name": "IsOnCreditHold",
						"type": "BOOLEAN"
					},
					{
						"name": "PaymentDays",
						"type": "INT32"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "WebsiteURL",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "UTF8"
					},
					{
						"name": "DeliveryLocation",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "PostalPostalCode",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiInte_stockitems_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "wwi"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "Integration/stockitems_Integration_parquet"
					}
				},
				"folder": {
					"name": "ds_wwi_integration"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().directoryName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().containerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_customers')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerName",
						"type": "nvarchar"
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerCategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BuyingGroupID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AlternateContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PostalCityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CreditLimit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "date"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "bit"
					},
					{
						"name": "IsOnCreditHold",
						"type": "bit"
					},
					{
						"name": "PaymentDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "WebsiteURL",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryLocation",
						"type": "geography"
					},
					{
						"name": "PostalAddressLine1",
						"type": "nvarchar"
					},
					{
						"name": "PostalAddressLine2",
						"type": "nvarchar"
					},
					{
						"name": "PostalPostalCode",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_invoices')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "InvoiceID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BillToCustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryMethodID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountsPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InvoiceDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsCreditNote",
						"type": "bit"
					},
					{
						"name": "CreditNoteReason",
						"type": "nvarchar"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "TotalDryItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TotalChillerItems",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DeliveryRun",
						"type": "nvarchar"
					},
					{
						"name": "RunPosition",
						"type": "nvarchar"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "nvarchar"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Invoices"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_oders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SalespersonPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickedByPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ContactPersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "BackorderOrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderDate",
						"type": "date"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "date"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "nvarchar"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "bit"
					},
					{
						"name": "Comments",
						"type": "nvarchar"
					},
					{
						"name": "DeliveryInstructions",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_orderlines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderLineID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "PickedQuantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PickingCompletedWhen",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastEditedWhen",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Sales",
					"table": "OrderLines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_packageTypes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PackageTypeID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PackageTypeName",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "PackageTypes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_people')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullName",
						"type": "nvarchar"
					},
					{
						"name": "PreferredName",
						"type": "nvarchar"
					},
					{
						"name": "SearchName",
						"type": "nvarchar"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "bit"
					},
					{
						"name": "LogonName",
						"type": "nvarchar"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "bit"
					},
					{
						"name": "HashedPassword",
						"type": "varbinary"
					},
					{
						"name": "IsSystemUser",
						"type": "bit"
					},
					{
						"name": "IsEmployee",
						"type": "bit"
					},
					{
						"name": "IsSalesperson",
						"type": "bit"
					},
					{
						"name": "UserPreferences",
						"type": "nvarchar"
					},
					{
						"name": "PhoneNumber",
						"type": "nvarchar"
					},
					{
						"name": "FaxNumber",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "OtherLanguages",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Application",
					"table": "People"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwi_stockitems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwidw_customers_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Customer Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Customer ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer",
						"type": "nvarchar"
					},
					{
						"name": "Bill To Customer",
						"type": "nvarchar"
					},
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "Buying Group",
						"type": "nvarchar"
					},
					{
						"name": "Primary Contact",
						"type": "nvarchar"
					},
					{
						"name": "Postal Code",
						"type": "nvarchar"
					},
					{
						"name": "Valid From",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Valid To",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dimension",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwidw_employee_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Employee Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Employee ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Employee",
						"type": "nvarchar"
					},
					{
						"name": "Preferred Name",
						"type": "nvarchar"
					},
					{
						"name": "Is Salesperson",
						"type": "bit"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "Valid From",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Valid To",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dimension",
					"table": "Employee"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwidw_order_fact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Order Key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "City Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Stock Item Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Order Date Key",
						"type": "date"
					},
					{
						"name": "Picked Date Key",
						"type": "date"
					},
					{
						"name": "Salesperson Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Picker Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Order ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Backorder ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Package",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Unit Price",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Tax Rate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Total Excluding Tax",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Tax Amount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Total Including Tax",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "Order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwidw_sale_fact')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Sale Key",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "City Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Customer Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Bill To Customer Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Stock Item Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Invoice Date Key",
						"type": "date"
					},
					{
						"name": "Delivery Date Key",
						"type": "date"
					},
					{
						"name": "Salesperson Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Invoice ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Description",
						"type": "nvarchar"
					},
					{
						"name": "Package",
						"type": "nvarchar"
					},
					{
						"name": "Quantity",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Unit Price",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Tax Rate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Total Excluding Tax",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Tax Amount",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Profit",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Total Including Tax",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Total Dry Items",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total Chiller Items",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Fact",
					"table": "Sale"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwidw_stockitems_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseDW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_dw"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Stock Item Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Stock Item ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Stock Item",
						"type": "nvarchar"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "Selling Package",
						"type": "nvarchar"
					},
					{
						"name": "Buying Package",
						"type": "nvarchar"
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "Lead Time Days",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Quantity Per Outer",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Is Chiller Stock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "Tax Rate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Unit Price",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Recommended Retail Price",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "Typical Weight Per Unit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "Valid From",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Valid To",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dimension",
					"table": "Stock Item"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_customers_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/Customers",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerName",
						"type": "UTF8"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "CustomerCategoryID",
						"type": "INT32"
					},
					{
						"name": "BuyingGroupID",
						"type": "INT32"
					},
					{
						"name": "PrimaryContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AlternateContactPersonID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "DeliveryCityID",
						"type": "INT32"
					},
					{
						"name": "PostalCityID",
						"type": "INT32"
					},
					{
						"name": "CreditLimit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "AccountOpenedDate",
						"type": "DATE"
					},
					{
						"name": "StandardDiscountPercentage",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "IsStatementSent",
						"type": "BOOLEAN"
					},
					{
						"name": "IsOnCreditHold",
						"type": "BOOLEAN"
					},
					{
						"name": "PaymentDays",
						"type": "INT32"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "WebsiteURL",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "DeliveryAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "DeliveryPostalCode",
						"type": "UTF8"
					},
					{
						"name": "DeliveryLocation",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine1",
						"type": "UTF8"
					},
					{
						"name": "PostalAddressLine2",
						"type": "UTF8"
					},
					{
						"name": "PostalPostalCode",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_invoices_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/Invoices",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "InvoiceID",
						"type": "INT32"
					},
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "BillToCustomerID",
						"type": "INT32"
					},
					{
						"name": "OrderID",
						"type": "INT32"
					},
					{
						"name": "DeliveryMethodID",
						"type": "INT32"
					},
					{
						"name": "ContactPersonID",
						"type": "INT32"
					},
					{
						"name": "AccountsPersonID",
						"type": "INT32"
					},
					{
						"name": "SalespersonPersonID",
						"type": "INT32"
					},
					{
						"name": "PackedByPersonID",
						"type": "INT32"
					},
					{
						"name": "InvoiceDate",
						"type": "DATE"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "IsCreditNote",
						"type": "BOOLEAN"
					},
					{
						"name": "CreditNoteReason",
						"type": "UTF8"
					},
					{
						"name": "Comments",
						"type": "UTF8"
					},
					{
						"name": "DeliveryInstructions",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "TotalDryItems",
						"type": "INT32"
					},
					{
						"name": "TotalChillerItems",
						"type": "INT32"
					},
					{
						"name": "DeliveryRun",
						"type": "UTF8"
					},
					{
						"name": "RunPosition",
						"type": "UTF8"
					},
					{
						"name": "ReturnedDeliveryData",
						"type": "UTF8"
					},
					{
						"name": "ConfirmedDeliveryTime",
						"type": "INT96"
					},
					{
						"name": "ConfirmedReceivedBy",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_orderlines_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/OrderLines",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "OrderLineID",
						"type": "INT32"
					},
					{
						"name": "OrderID",
						"type": "INT32"
					},
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "Description",
						"type": "UTF8"
					},
					{
						"name": "PackageTypeID",
						"type": "INT32"
					},
					{
						"name": "Quantity",
						"type": "INT32"
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "PickedQuantity",
						"type": "INT32"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "INT96"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_orders_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/Orders",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "OrderID",
						"type": "INT32"
					},
					{
						"name": "CustomerID",
						"type": "INT32"
					},
					{
						"name": "SalespersonPersonID",
						"type": "INT32"
					},
					{
						"name": "PickedByPersonID",
						"type": "INT32"
					},
					{
						"name": "ContactPersonID",
						"type": "INT32"
					},
					{
						"name": "BackorderOrderID",
						"type": "INT32"
					},
					{
						"name": "OrderDate",
						"type": "DATE"
					},
					{
						"name": "ExpectedDeliveryDate",
						"type": "DATE"
					},
					{
						"name": "CustomerPurchaseOrderNumber",
						"type": "UTF8"
					},
					{
						"name": "IsUndersupplyBackordered",
						"type": "BOOLEAN"
					},
					{
						"name": "Comments",
						"type": "UTF8"
					},
					{
						"name": "DeliveryInstructions",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "PickingCompletedWhen",
						"type": "INT96"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "LastEditedWhen",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_people_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/People",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "PersonID",
						"type": "INT32"
					},
					{
						"name": "FullName",
						"type": "UTF8"
					},
					{
						"name": "PreferredName",
						"type": "UTF8"
					},
					{
						"name": "SearchName",
						"type": "UTF8"
					},
					{
						"name": "IsPermittedToLogon",
						"type": "BOOLEAN"
					},
					{
						"name": "LogonName",
						"type": "UTF8"
					},
					{
						"name": "IsExternalLogonProvider",
						"type": "BOOLEAN"
					},
					{
						"name": "HashedPassword",
						"type": "BINARY"
					},
					{
						"name": "IsSystemUser",
						"type": "BOOLEAN"
					},
					{
						"name": "IsEmployee",
						"type": "BOOLEAN"
					},
					{
						"name": "IsSalesperson",
						"type": "BOOLEAN"
					},
					{
						"name": "UserPreferences",
						"type": "UTF8"
					},
					{
						"name": "PhoneNumber",
						"type": "UTF8"
					},
					{
						"name": "FaxNumber",
						"type": "UTF8"
					},
					{
						"name": "EmailAddress",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "OtherLanguages",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_stockitems_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "ODS/StockItems",
						"fileSystem": "wwi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "StockItemID",
						"type": "INT32"
					},
					{
						"name": "StockItemName",
						"type": "UTF8"
					},
					{
						"name": "SupplierID",
						"type": "INT32"
					},
					{
						"name": "ColorID",
						"type": "INT32"
					},
					{
						"name": "UnitPackageID",
						"type": "INT32"
					},
					{
						"name": "OuterPackageID",
						"type": "INT32"
					},
					{
						"name": "Brand",
						"type": "UTF8"
					},
					{
						"name": "Size",
						"type": "UTF8"
					},
					{
						"name": "LeadTimeDays",
						"type": "INT32"
					},
					{
						"name": "QuantityPerOuter",
						"type": "INT32"
					},
					{
						"name": "IsChillerStock",
						"type": "BOOLEAN"
					},
					{
						"name": "Barcode",
						"type": "UTF8"
					},
					{
						"name": "TaxRate",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "DECIMAL",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "UTF8"
					},
					{
						"name": "InternalComments",
						"type": "UTF8"
					},
					{
						"name": "Photo",
						"type": "BINARY"
					},
					{
						"name": "CustomFields",
						"type": "UTF8"
					},
					{
						"name": "Tags",
						"type": "UTF8"
					},
					{
						"name": "SearchDetails",
						"type": "UTF8"
					},
					{
						"name": "LastEditedBy",
						"type": "INT32"
					},
					{
						"name": "ValidFrom",
						"type": "INT96"
					},
					{
						"name": "ValidTo",
						"type": "INT96"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_tableList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tableList2.json",
						"fileSystem": "wwi"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"TABLE_NAME": {
							"type": "string"
						},
						"WaterMark_Column": {
							"type": "string"
						},
						"TableType": {
							"type": "string"
						},
						"StoredProcedureNameForMergeOperation": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiods_watermark')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWISqlDatabaseODS",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "ds_wwi_ods"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWISqlDatabaseODS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricksDeltaLake1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-6485409495552159.19.azuredatabricks.net",
					"clusterId": "0821-211101-erdperx2",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricksDeltaLake1_accessToken')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SqlServer1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWISqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWISqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWISqlDatabaseDW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWISqlDatabaseDW_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWISqlDatabaseODS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWISqlDatabaseODS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_b2s')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dataflow_movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_movie_bronze_parquet",
								"type": "DatasetReference"
							},
							"name": "bronzeParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_movie_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "cleanSilver"
						},
						{
							"dataset": {
								"referenceName": "ds_movie_bronze_parquet",
								"type": "DatasetReference"
							},
							"name": "bronzeUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_orilanguage_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "languageSilver"
						},
						{
							"dataset": {
								"referenceName": "ds_genre_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "genresSilver"
						},
						{
							"dataset": {
								"referenceName": "ds_movie_genres_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkJunctionMoviesGenres"
						}
					],
					"transformations": [
						{
							"name": "filterStatusNew"
						},
						{
							"name": "split1"
						},
						{
							"name": "changeStatusPostive"
						},
						{
							"name": "changeStatusNegative"
						},
						{
							"name": "unionPN"
						},
						{
							"name": "selectSilver"
						},
						{
							"name": "selectLangague"
						},
						{
							"name": "aggregateLanguage"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "flattenGenres"
						},
						{
							"name": "aggrGenres"
						},
						{
							"name": "selectGenres"
						},
						{
							"name": "selectJunction"
						},
						{
							"name": "flattenJunction"
						},
						{
							"name": "junctionMoviesGenres"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as short,",
						"          Title as string,",
						"          Overview as string,",
						"          OriginalLanguage as string,",
						"          Price as double,",
						"          ReleaseDate as string,",
						"          Budget as double,",
						"          Revenue as double,",
						"          RunTime as short,",
						"          Tagline as string,",
						"          ImdbUrl as string,",
						"          TmdbUrl as string,",
						"          PosterUrl as string,",
						"          BackdropUrl as string,",
						"          CreatedDate as string,",
						"          CreatedBy as string,",
						"          UpdatedDate as string,",
						"          UpdatedBy as string,",
						"          genres as (id as short, name as string)[],",
						"          Status as string,",
						"          ingestTime as timestamp,",
						"          ingestDate as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronzeParquet",
						"bronzeParquet filter(Status=='New') ~> filterStatusNew",
						"filterStatusNew split(RunTime>=0,",
						"     disjoint: false) ~> split1@(runtimePostive, runtimeNegative)",
						"split1@runtimePostive derive(Status = 'Loaded') ~> changeStatusPostive",
						"split1@runtimeNegative derive(Status = 'Quarantined') ~> changeStatusNegative",
						"changeStatusPostive, changeStatusNegative union(byName: true)~> unionPN",
						"changeStatusPostive select(mapColumn(",
						"          Id,",
						"          Title,",
						"          Overview,",
						"          OriginalLanguage,",
						"          Price,",
						"          ReleaseDate,",
						"          Budget,",
						"          Revenue,",
						"          RunTime,",
						"          Tagline,",
						"          ImdbUrl,",
						"          TmdbUrl,",
						"          PosterUrl,",
						"          BackdropUrl,",
						"          CreatedDate,",
						"          CreatedBy,",
						"          UpdatedDate,",
						"          UpdatedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSilver",
						"bronzeParquet select(mapColumn(",
						"          OriginalLanguage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectLangague",
						"selectLangague aggregate(groupBy(OriginalLanguage),",
						"     each(match(name!='OriginalLanguage'), $$ = first($$))) ~> aggregateLanguage",
						"aggregateLanguage keyGenerate(output(LanguageCode as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"selectGenres foldDown(unroll(genres),",
						"     mapColumn(",
						"          genres_id = genres.id,",
						"          name = genres.name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenGenres",
						"flattenGenres aggregate(groupBy(name),",
						"     each(match(name!='name'), $$ = first($$))) ~> aggrGenres",
						"bronzeParquet select(mapColumn(",
						"          genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectGenres",
						"bronzeParquet select(mapColumn(",
						"          Id,",
						"          genres",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJunction",
						"selectJunction foldDown(unroll(genres),",
						"     mapColumn(",
						"          Id,",
						"          genres_id = genres.id,",
						"          name = genres.name",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJunction",
						"flattenJunction select(mapColumn(",
						"          movie_Id = Id,",
						"          genres_Id = genres_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> junctionMoviesGenres",
						"selectSilver sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> cleanSilver",
						"unionPN sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronzeUpdate",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> languageSilver",
						"aggrGenres sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> genresSilver",
						"junctionMoviesGenres sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkJunctionMoviesGenres"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movie_bronze_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_movie_silver_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_orilanguage_silver_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_genre_silver_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_movie_genres_silver_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_r2b')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dataflow_movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_movie_raw_json",
								"type": "DatasetReference"
							},
							"name": "raw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_movie_bronze_parquet",
								"type": "DatasetReference"
							},
							"name": "bronze"
						}
					],
					"transformations": [
						{
							"name": "addMetadata"
						},
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as (BackdropUrl as string, Budget as double, CreatedBy as string, CreatedDate as string, Id as short, ImdbUrl as string, OriginalLanguage as string, Overview as string, PosterUrl as string, Price as double, ReleaseDate as string, Revenue as double, RunTime as short, Tagline as string, Title as string, TmdbUrl as string, UpdatedBy as string, UpdatedDate as string, genres as (id as short, name as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> raw",
						"flatten1 derive(Status = 'New',",
						"          ingestTime = currentTimestamp(),",
						"          ingestDate = dayOfMonth(currentTimestamp())) ~> addMetadata",
						"raw foldDown(unroll(movie),",
						"     mapColumn(",
						"          Id = movie.Id,",
						"          Title = movie.Title,",
						"          Overview = movie.Overview,",
						"          OriginalLanguage = movie.OriginalLanguage,",
						"          Price = movie.Price,",
						"          ReleaseDate = movie.ReleaseDate,",
						"          Budget = movie.Budget,",
						"          Revenue = movie.Revenue,",
						"          RunTime = movie.RunTime,",
						"          Tagline = movie.Tagline,",
						"          ImdbUrl = movie.ImdbUrl,",
						"          TmdbUrl = movie.TmdbUrl,",
						"          PosterUrl = movie.PosterUrl,",
						"          BackdropUrl = movie.BackdropUrl,",
						"          CreatedDate = movie.CreatedDate,",
						"          CreatedBy = movie.CreatedBy,",
						"          UpdatedDate = movie.UpdatedDate,",
						"          UpdatedBy = movie.UpdatedBy,",
						"          genres = movie.genres",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"addMetadata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronze"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movie_raw_json')]",
				"[concat(variables('factoryId'), '/datasets/ds_movie_bronze_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_repair')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dataflow_movie"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_movie_bronze_parquet",
								"type": "DatasetReference"
							},
							"name": "bronzeParquet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_movie_bronze_parquet",
								"type": "DatasetReference"
							},
							"name": "bronzeUpdate"
						},
						{
							"dataset": {
								"referenceName": "ds_movie_silver_parquet",
								"type": "DatasetReference"
							},
							"name": "silverInsert"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as short,",
						"          Title as string,",
						"          Overview as string,",
						"          OriginalLanguage as string,",
						"          Price as double,",
						"          ReleaseDate as string,",
						"          Budget as double,",
						"          Revenue as double,",
						"          RunTime as short,",
						"          Tagline as string,",
						"          ImdbUrl as string,",
						"          TmdbUrl as string,",
						"          PosterUrl as string,",
						"          BackdropUrl as string,",
						"          CreatedDate as string,",
						"          CreatedBy as string,",
						"          UpdatedDate as string,",
						"          UpdatedBy as string,",
						"          Status as string,",
						"          ingestTime as timestamp,",
						"          ingestDate as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> bronzeParquet",
						"bronzeParquet alterRow(updateIf(Status=='Quarantined')) ~> alterRow1",
						"alterRow1 derive(RunTime = abs(RunTime)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> bronzeUpdate",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> silverInsert"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_movie_bronze_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_movie_silver_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_wwi_ods_to_integration')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "dataflow_wwi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_wwiods_customers_parquet",
								"type": "DatasetReference"
							},
							"name": "CustomersParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiods_people_parquet",
								"type": "DatasetReference"
							},
							"name": "PeopleParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiods_invoices_parquet",
								"type": "DatasetReference"
							},
							"name": "InvoicesParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiods_orderlines_parquet",
								"type": "DatasetReference"
							},
							"name": "OrderLinesParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiods_orders_parquet",
								"type": "DatasetReference"
							},
							"name": "OrdersParquet"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiods_stockitems_parquet",
								"type": "DatasetReference"
							},
							"name": "StockItems"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_wwiInte_customers_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkCustomers"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiInte_employee_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkEmployee"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiInte_stockitems_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkStockitems"
						},
						{
							"dataset": {
								"referenceName": "ds_wwiInte_orders_parquet",
								"type": "DatasetReference"
							},
							"name": "sinkOrdersFact"
						}
					],
					"transformations": [
						{
							"name": "joinPeople"
						},
						{
							"name": "selectCustomers"
						},
						{
							"name": "joinBillCustomers"
						},
						{
							"name": "selectCustomersInte"
						},
						{
							"name": "filterEmployee"
						},
						{
							"name": "selectEmployee"
						},
						{
							"name": "selectStockitems"
						},
						{
							"name": "selectOrders"
						},
						{
							"name": "selectOrderLines"
						},
						{
							"name": "joinOrdersFact"
						},
						{
							"name": "selectOrdersFact"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as integer,",
						"          CustomerCategoryID as integer,",
						"          BuyingGroupID as integer,",
						"          PrimaryContactPersonID as integer,",
						"          AlternateContactPersonID as integer,",
						"          DeliveryMethodID as integer,",
						"          DeliveryCityID as integer,",
						"          PostalCityID as integer,",
						"          CreditLimit as decimal(18,2),",
						"          AccountOpenedDate as date,",
						"          StandardDiscountPercentage as decimal(18,3),",
						"          IsStatementSent as boolean,",
						"          IsOnCreditHold as boolean,",
						"          PaymentDays as integer,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          WebsiteURL as string,",
						"          DeliveryAddressLine1 as string,",
						"          DeliveryAddressLine2 as string,",
						"          DeliveryPostalCode as string,",
						"          DeliveryLocation as string,",
						"          PostalAddressLine1 as string,",
						"          PostalAddressLine2 as string,",
						"          PostalPostalCode as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CustomersParquet",
						"source(output(",
						"          PersonID as integer,",
						"          FullName as string,",
						"          PreferredName as string,",
						"          SearchName as string,",
						"          IsPermittedToLogon as boolean,",
						"          LogonName as string,",
						"          IsExternalLogonProvider as boolean,",
						"          HashedPassword as binary,",
						"          IsSystemUser as boolean,",
						"          IsEmployee as boolean,",
						"          IsSalesperson as boolean,",
						"          UserPreferences as string,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailAddress as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          OtherLanguages as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> PeopleParquet",
						"source(output(",
						"          InvoiceID as integer,",
						"          CustomerID as integer,",
						"          BillToCustomerID as integer,",
						"          OrderID as integer,",
						"          DeliveryMethodID as integer,",
						"          ContactPersonID as integer,",
						"          AccountsPersonID as integer,",
						"          SalespersonPersonID as integer,",
						"          PackedByPersonID as integer,",
						"          InvoiceDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsCreditNote as boolean,",
						"          CreditNoteReason as string,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          TotalDryItems as integer,",
						"          TotalChillerItems as integer,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          ReturnedDeliveryData as string,",
						"          ConfirmedDeliveryTime as timestamp,",
						"          ConfirmedReceivedBy as string,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> InvoicesParquet",
						"source(output(",
						"          OrderLineID as integer,",
						"          OrderID as integer,",
						"          StockItemID as integer,",
						"          Description as string,",
						"          PackageTypeID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          TaxRate as decimal(18,3),",
						"          PickedQuantity as integer,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> OrderLinesParquet",
						"source(output(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          SalespersonPersonID as integer,",
						"          PickedByPersonID as integer,",
						"          ContactPersonID as integer,",
						"          BackorderOrderID as integer,",
						"          OrderDate as date,",
						"          ExpectedDeliveryDate as date,",
						"          CustomerPurchaseOrderNumber as string,",
						"          IsUndersupplyBackordered as boolean,",
						"          Comments as string,",
						"          DeliveryInstructions as string,",
						"          InternalComments as string,",
						"          PickingCompletedWhen as timestamp,",
						"          LastEditedBy as integer,",
						"          LastEditedWhen as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> OrdersParquet",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> StockItems",
						"CustomersParquet, PeopleParquet join(PrimaryContactPersonID == PersonID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinPeople",
						"joinPeople select(mapColumn(",
						"          CustomerID,",
						"          CustomerName,",
						"          BillToCustomerID,",
						"          CustomerCategoryID,",
						"          BuyingGroupID,",
						"          PostalCode = DeliveryPostalCode,",
						"          ValidFrom = CustomersParquet@ValidFrom,",
						"          ValidTo = CustomersParquet@ValidTo,",
						"          {Primary Contact} = FullName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomers",
						"selectCustomers, CustomersParquet join(selectCustomers@BillToCustomerID == CustomersParquet@CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBillCustomers",
						"joinBillCustomers select(mapColumn(",
						"          WWICustomerID = selectCustomers@CustomerID,",
						"          Customer = selectCustomers@CustomerName,",
						"          BillToCustomerID = selectCustomers@BillToCustomerID,",
						"          BillToCustomer = CustomersParquet@CustomerName,",
						"          CustomerCategoryID = selectCustomers@CustomerCategoryID,",
						"          BuyingGroupID = selectCustomers@BuyingGroupID,",
						"          PostalCode,",
						"          ValidFrom = selectCustomers@ValidFrom,",
						"          ValidTo = selectCustomers@ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCustomersInte",
						"PeopleParquet filter(IsEmployee == true()) ~> filterEmployee",
						"filterEmployee select(mapColumn(",
						"          WWIPersonID = PersonID,",
						"          Employee = FullName,",
						"          PreferredName,",
						"          IsSalesperson,",
						"          PhoneNumber,",
						"          Photo,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEmployee",
						"StockItems select(mapColumn(",
						"          WWIStockItemID = StockItemID,",
						"          StockItem = StockItemName,",
						"          ColorID,",
						"          UnitPackageID,",
						"          OuterPackageID,",
						"          Brand,",
						"          Size,",
						"          LeadTimeDays,",
						"          QuantityPerOuter,",
						"          IsChillerStock,",
						"          Barcode,",
						"          TaxRate,",
						"          UnitPrice,",
						"          RecommendedRetailPrice,",
						"          TypicalWeightPerUnit,",
						"          Photo,",
						"          ValidFrom,",
						"          ValidTo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectStockitems",
						"OrdersParquet select(mapColumn(",
						"          OrderID1 = OrderID,",
						"          CustomerID,",
						"          SalespersonPersonID,",
						"          PickedByPersonID,",
						"          BackorderOrderID,",
						"          OrderDate,",
						"          PickingCompletedWhen,",
						"          LastEditedWhen",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrders",
						"OrderLinesParquet select(mapColumn(",
						"          OrderLineID,",
						"          OrderID,",
						"          StockItemID,",
						"          Description,",
						"          PackageTypeID,",
						"          Quantity,",
						"          UnitPrice,",
						"          TaxRate,",
						"          LastEditedBy",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrderLines",
						"selectOrderLines, selectOrders join(OrderID == OrderID1,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinOrdersFact",
						"joinOrdersFact select(mapColumn(",
						"          WWIOrderLineID = OrderLineID,",
						"          WWIOrderID = OrderID,",
						"          CustomerKey = CustomerID,",
						"          StockItemKey = StockItemID,",
						"          OrderDate,",
						"          PickedDate = PickingCompletedWhen,",
						"          SalespersonKey = SalespersonPersonID,",
						"          PickerKey = PickedByPersonID,",
						"          WWIBackorderID = BackorderOrderID,",
						"          PackageTypeKey = PackageTypeID,",
						"          Description,",
						"          UnitPrice,",
						"          Quantity,",
						"          TaxRate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectOrdersFact",
						"selectCustomersInte sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          CustomerName as string,",
						"          BillToCustomerID as integer,",
						"          CustomerCategoryID as integer,",
						"          BuyingGroupID as integer,",
						"          PrimaryContactPersonID as integer,",
						"          AlternateContactPersonID as integer,",
						"          DeliveryMethodID as integer,",
						"          DeliveryCityID as integer,",
						"          PostalCityID as integer,",
						"          CreditLimit as decimal(18,2),",
						"          AccountOpenedDate as date,",
						"          StandardDiscountPercentage as decimal(18,3),",
						"          IsStatementSent as boolean,",
						"          IsOnCreditHold as boolean,",
						"          PaymentDays as integer,",
						"          PhoneNumber as string,",
						"          FaxNumber as string,",
						"          DeliveryRun as string,",
						"          RunPosition as string,",
						"          WebsiteURL as string,",
						"          DeliveryAddressLine1 as string,",
						"          DeliveryAddressLine2 as string,",
						"          DeliveryPostalCode as string,",
						"          DeliveryLocation as string,",
						"          PostalAddressLine1 as string,",
						"          PostalAddressLine2 as string,",
						"          PostalPostalCode as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkCustomers",
						"selectEmployee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkEmployee",
						"selectStockitems sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkStockitems",
						"selectOrdersFact sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkOrdersFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_customers_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_people_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_invoices_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_orderlines_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_orders_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiods_stockitems_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiInte_customers_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiInte_employee_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiInte_stockitems_parquet')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwiInte_orders_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiInte_orders_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "wwi"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "Integration/orders_Integration_parquet"
					}
				},
				"folder": {
					"name": "ds_wwi_integration"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwiInte_sales_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"containerName": {
						"type": "string",
						"defaultValue": "wwi"
					},
					"directoryName": {
						"type": "string",
						"defaultValue": "Integration/sales_Integration_parquet(Invoices))"
					}
				},
				"folder": {
					"name": "ds_wwi_integration"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		}
	]
}